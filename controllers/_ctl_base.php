<?php
/**
 * @author Martin Gamboa Vazquez
 * @version 1.0.0
 * @created 2022-05-14
 * @final En proceso
 *
 */
namespace gamboamartin\acl\controllers;

use gamboamartin\errores\errores;
use gamboamartin\system\out_permisos;
use gamboamartin\system\system;
use gamboamartin\validacion\validacion;
use stdClass;



class _ctl_base extends system{

    /**
     * Integra los campos view de una vista para alta y modifica
     * @return array
     * @version 0.73.1
     */
    protected function campos_view(): array
    {
        return array();
    }

    /**
     * Integra los elementos base de una view
     * @return array|$this
     * @version 0.73.1
     */
    private function base(): array|static
    {

        $campos_view = $this->campos_view();
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar campos_view',data:  $campos_view);
        }

        $this->modelo->campos_view = $campos_view;



        $this->inputs = new stdClass();
        $this->inputs->select = new stdClass();


        return $this;
    }

    protected function base_upd(array $keys_selects, array $not_actions, array $params): array|stdClass
    {

        if(count($params) === 0){
            $params = array();
            $params['next_seccion'] = $this->tabla;
            $params['next_accion'] = $this->accion;
        }

        $inputs = $this->inputs(keys_selects: $keys_selects);
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al obtener inputs',data:  $inputs);
        }

        $this->buttons = array();
        $buttons = (new out_permisos())->buttons_view(controler:$this, not_actions: $not_actions, params: $params);
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al generar botones',data:  $buttons);
        }

        $data = new stdClass();
        $data->buttons = $buttons;
        $data->inputs = $inputs;
        $this->buttons = $buttons;
        return $data;
    }

    /**
     * Inicializa loe elementos para un alta
     * @return array|stdClass|string
     * @version 0.73.1
     */
    protected function init_alta(): array|stdClass|string
    {

        $r_template = parent::alta(header:false); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al obtener template',data:  $r_template);
        }

        $base = $this->base();
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al genera base',data:  $base);
        }

        return $r_template;
    }

    /**
     * Inicializa upd base view
     * @return array|stdClass|string
     * @version 0.74.1
     */
    protected function init_modifica(): array|stdClass|string
    {
        if($this->registro_id<=0){
            return $this->errores->error(mensaje: 'Error registro_id debe ser mayor a 0', data: $this->registro_id);
        }

        $r_template = parent::modifica(header: false); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al obtener template',data:  $r_template);
        }

        $base = $this->base();
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al genera base',data:  $base);
        }
        return $r_template;
    }

    /**
     * Integra los parametros de un key para select
     * @param int $cols N cols css
     * @param bool $con_registros integra rows en opciones si es true
     * @param array $filtro Filtro para result
     * @param string $key Name input
     * @param array $keys_selects keys precargados
     * @param int|null $id_selected Identificador para selected
     * @param string $label Etiqueta a mostrar
     * @return array
     * @version 0.78.1
     */
    protected function key_select(int $cols, bool $con_registros, array $filtro,string $key, array $keys_selects,
                                  int|null $id_selected, string $label): array
    {
        $key = trim($key);
        if($key === ''){
            return $this->errores->error(mensaje: 'Error key esta vacio',data:  $key);
        }
        $valida = (new validacion())->valida_cols_css(cols: $cols);
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al validar cols',data:  $valida);
        }

        $label = trim($label);
        if($label === ''){
            $label = trim($key);
            $label = str_replace('_', ' ', $label);
            $label = ucwords($label);
        }

        $keys_selects[$key] = new stdClass();
        $keys_selects[$key]->cols = $cols;
        $keys_selects[$key]->con_registros = $con_registros;
        $keys_selects[$key]->label = $label;
        $keys_selects[$key]->id_selected = $id_selected;
        $keys_selects[$key]->filtro = $filtro;
        return $keys_selects;
    }

}
